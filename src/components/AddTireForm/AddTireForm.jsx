import s from "./AddTireForm.module.css";

import { ErrorMessage, Field, Form, Formik } from "formik";
import * as Yup from "yup"; //–≤–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–æ—Ä–º–∏

import { useDispatch } from "react-redux";
import { addTire } from "../../redux/tire/operations";
import toast from "react-hot-toast";
import { useEffect } from "react";

export const AddTireForm = ({ onClose }) => {
  const initialValues = {
    category: "",
    title: "",
    price: "",
    size: "",
    producer: "",
    modelTire: "",
    layering: "",
    loadIndex: "",
    tireType: "",
    image: "",
    diskModel: "",
    instock: "",
  };

  const dispatch = useDispatch();

  //values —Ü–µ initialValues
  const handleSubmit = async (values, options) => {
    options.setSubmitting(true);
    try {
      console.log("üü° Formik values:", values);

      const newTire = {
        //   id - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ (MongoDB)
        category: values.category,
        title: values.title,
        price: Number(values.price),
        size: values.size,
        producer: values.producer || "",
        modelTire: values.modelTire || "",
        layering: values.layering || "",
        loadIndex: values.loadIndex || "",
        tireType: values.title === "tire" ? values.tireType : "", // '' - —â–æ–± –±—É–ª–æ –ø–æ—Ä–æ–∂–Ω—ñ–º –¥–ª—è –¥–∏—Å–∫—ñ–≤
        diskModel: values.diskModel || "",
        instock: values.instock, //// –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —É Boolean true/false
      };

      const formData = new FormData();

      // –î–æ–¥–∞—î–º–æ –≤—Å—ñ –ø–æ–ª—è –∑ newTire –¥–æ FormData
      Object.entries(newTire).forEach(([key, value]) => {
        formData.append(key, value.toString());
      });
      // –î–æ–¥–∞—î–º–æ image –æ–∫—Ä–µ–º–æ, —è–∫—â–æ –≤–æ–Ω–æ —î
      if (values.image) {
        formData.append("image", values.image); // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ –±–µ–∫–µ–Ω–¥
      }

      console.log("üü¢ FormData entries:");
      for (const [key, value] of formData.entries()) {
        console.log(`${key}:`, value);
      }

      await dispatch(addTire(formData)).unwrap();
      toast.success(
        `${newTire.title} ${newTire.size} –¥–æ–¥–∞–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é ${newTire.category}.`
      );
      options.resetForm(); // –æ—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º–∏
      onClose(); // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª–∫—É
    } catch (error) {
      toast.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —à–∏–Ω–∏");
      console.error("Error:", error);
    } finally {
      options.setSubmitting(false); // —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
    }
    //   dublicate ?? –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —è–∫—â–æ –≤–∂–µ —Ç–∞–∫–∞ —à–∏–Ω–∞ —î??
    //—è–∫ —à–∏–Ω–∞ –Ω–æ–≤–∞ —Ç–æ –ø–æ–≤—ñ–¥–∞–º–ª–µ–Ω–Ω—è —â–æ –¥–æ–¥–∞–ª–∏

    ////   –¥—É–±–ª—é—î—Ç—å—Å—è
    // dispatch(addTire(newTire));
    // toast.success(`${newTire.title} ${newTire.size} –¥–æ–¥–∞–Ω–æ.`);
  };

  //–≤–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–ª—è Form —á–µ—Ä–µ–∑ Formik - –ü–ï–†–ï–í–Ü–†–ò–¢–ò –ù–ê –ü–†–ê–ö–¢–ò–¶–Ü –ö–û–õ–ò –ë–£–î–£ –ó–ê–ü–û–í–ù–Æ–í–ê–¢–ò –®–ò–ù–ò
  const tireSchema = Yup.object().shape({
    category: Yup.string()
      .oneOf(["loader", "industrial", "agricultural", "rims"])
      .required("–¶–µ –ø–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ"), //–æ–±–∏—Ä–∞—î–º–æ –∑ —á–æ—Ç–∏—Ä—å–æ—Ö
    title: Yup.string().oneOf(["tire", "rims"]).required("–¶–µ –ø–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ"), //–æ–±–∏—Ä–∞—î–º–æ –∑ –¥–≤–æ—Ö
    price: Yup.number()
      .typeError("–¶—ñ–Ω–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
      .min(0, "–¶—ñ–Ω–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ—é")
      .required("–¶–µ –ø–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ"),
    size: Yup.string().required("–¶–µ –ø–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ"),
    producer: Yup.string().optional(), //?? optional - –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π
    modelTire: Yup.string().optional(), //??
    layering: Yup.string().optional(), //??
    loadIndex: Yup.string().optional(), //??
    tireType: Yup.string()
      .nullable() // –¥–æ–∑–≤–æ–ª—è—î null
      .oneOf(["tl", "tt", "", null], "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–∏–ø —à–∏–Ω–∏")
      .when("title", {
        is: "tire",
        then: (schema) => schema.notRequired(),
        // then: (schema) => schema.oneOf(["tl", "tt"]),
        otherwise: (schema) => schema.strip(), // –ø–æ–≤–Ω—ñ—Å—Ç—é –ø—Ä–∏–±–∏—Ä–∞—î –ø–æ–ª–µ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É, —è–∫—â–æ —Ü–µ –Ω–µ "tire"
      }),
    // –ó–ê–ì–†–£–ó–ö–ê –§–û–¢–û
    image: Yup.mixed()
      .test("fileSize", "–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π", (value) => {
        if (!value) return true; // –î–æ–∑–≤–æ–ª—è—î–º–æ –ø–æ—Ä–æ–∂–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è
        return value.size <= 5 * 1024 * 1024; // –ú–∞–∫—Å–∏–º—É–º 5MB
      })
      .test("fileType", "–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –ª–∏—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", (value) => {
        if (!value) return true;
        return ["image/jpeg", "image/png", "image/gif"].includes(value.type);
      })
      .optional(),
    diskModel: Yup.string().optional(),
    instock: Yup.string()
      .oneOf(["true", "false"], "–û–±–µ—Ä—ñ—Ç—å –Ω–∞—è–≤–Ω—ñ—Å—Ç—å")
      .required("–¶–µ –ø–æ–ª–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–µ"), //???????
  });

  return (
    <div>
      {/* Formik –º–∞—î 2 –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: onSubmit={}, obj={initialValues}, +validationSchema */}
      <Formik
        onSubmit={handleSubmit}
        initialValues={initialValues}
        validationSchema={tireSchema}
      >
        {({ values, setFieldValue, isSubmitting }) => {
          // –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
          useEffect(() => {
            if (values.category === "rims") {
              setFieldValue("title", "rims");
            } else if (
              values.category === "loader" ||
              values.category === "industrial" ||
              values.category === "agricultural"
            ) {
              setFieldValue("title", "tire");
            }
          }, [values.category, setFieldValue]);

          return (
            <Form className={s.form}>
              <h2 className={s.formTitle}>–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É</h2>

              <div className={s.group}>
                <label className={s.label}>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è</label>
                <Field className={s.input} as="select" name="category">
                  {/* disabled - –Ω–µ –º–æ–∂–µ–º–æ –æ–±—Ä–∞—Ç–∏ */}
                  <option disabled value="">
                    –û–±–µ—Ä—ñ—Ç—å –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:
                  </option>
                  <option value="loader">–®–∏–Ω–∏ –¥–ª—è –Ω–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—á—ñ–≤</option>
                  <option value="industrial">–®–∏–Ω–∏ —ñ–Ω–¥—É—Å—Ç—Ä—ñ–∞–ª—å–Ω—ñ</option>
                  <option value="agricultural">
                    –®–∏–Ω–∏ –¥–ª—è —Å—ñ–ª—å—Å–∫–æ–≥–æ—Å–ø–æ–¥–∞—Ä—Å–∫–æ—ó —Ç–µ—Ö–Ω—ñ–∫–∏
                  </option>
                  <option value="rims">–î–∏—Å–∫–∏</option>
                </Field>
                <ErrorMessage
                  name="category"
                  component="span"
                  className={s.error}
                />
              </div>

              <div className={s.group}>
                <label className={s.label}>–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è</label>
                <Field className={s.input} as="select" name="title">
                  <option disabled value="">
                    –û–±–µ—Ä—ñ—Ç—å –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:
                  </option>
                  {/* –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —è–∫ –±—É–¥–µ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö, –º–æ–∂–ª–∏–≤–æ –±—Ä–∞—Ç–∏ value? */}
                  <option value="tire">–®–∏–Ω–∞</option>
                  <option value="rims">–î–∏—Å–∫</option>
                </Field>
                <ErrorMessage
                  name="title"
                  component="span"
                  className={s.error}
                />
              </div>

              <div className={s.group}>
                <label className={s.label}>–¶—ñ–Ω–∞</label>
                <Field className={s.input} type="number" name="price" />
                <ErrorMessage
                  name="price"
                  component="span"
                  className={s.error}
                />
              </div>

              <div className={s.group}>
                <label className={s.label}>–†–æ–∑–º—ñ—Ä</label>
                <Field className={s.input} type="text" name="size" />
                <ErrorMessage
                  name="size"
                  component="span"
                  className={s.error}
                />
              </div>

              <div className={s.group}>
                <label className={s.label}>–í–∏—Ä–æ–±–Ω–∏–∫</label>
                <Field className={s.input} type="text" name="producer" />
                <ErrorMessage
                  name="producer"
                  component="span"
                  className={s.error}
                />
              </div>

              <div className={s.group}>
                <label className={s.label}>–ú–æ–¥–µ–ª—å —à–∏–Ω–∏</label>
                <Field className={s.input} type="text" name="modelTire" />
                <ErrorMessage
                  name="modelTire"
                  component="span"
                  className={s.error}
                />
              </div>

              <div className={s.group}>
                <label className={s.label}>–°–ª–æ–π–Ω—ñ—Å—Ç—å —à–∏–Ω–∏</label>
                <span></span>
                <Field className={s.input} type="text" name="layering" />
                <ErrorMessage
                  name="layering"
                  component="span"
                  className={s.error}
                />
              </div>

              <div className={s.group}>
                <label className={s.label}>–Ü–Ω–¥–µ–∫—Å</label>
                <Field className={s.input} type="text" name="loadIndex" />
                <ErrorMessage
                  name="loadIndex"
                  component="span"
                  className={s.error}
                />
              </div>

              {values.title === "tire" && (
                <div className={s.group}>
                  <label className={s.label}>–¢–∏–ø —à–∏–Ω–∏</label>
                  {/* <Field className={s.input} type="text" name="tireType" /> */}

                  <Field className={s.input} as="select" name="tireType">
                    <option disabled value="">
                      –û–±–µ—Ä—ñ—Ç—å –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:
                    </option>
                    {/* –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —è–∫ –±—É–¥–µ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö, –º–æ–∂–ª–∏–≤–æ –±—Ä–∞—Ç–∏ value? */}
                    <option value="tt">tt</option>
                    <option value="tl">tl</option>
                  </Field>
                  <ErrorMessage
                    name="tireType"
                    component="span"
                    className={s.error}
                  />
                </div>
              )}

              {values.category === "rims" && (
                <div className={s.group}>
                  <label className={s.label}>–ú–æ–¥–µ–ª—å –¥–∏—Å–∫—É</label>
                  <Field className={s.input} type="text" name="diskModel" />
                  <ErrorMessage
                    name="diskModel"
                    component="span"
                    className={s.error}
                  />
                </div>
              )}

              <div className={s.group}>
                <label className={s.label}>–ù–∞–≤–Ω—ñ—Å—Ç—å </label>
                <Field className={s.input} as="select" name="instock">
                  <option disabled value="">
                    –û–±–µ—Ä—ñ—Ç—å –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:
                  </option>
                  <option value="true">–Ñ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ</option>
                  <option value="false">–£—Ç–æ—á–Ω—é–π—Ç–µ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å</option>
                </Field>
                <ErrorMessage
                  name="instock"
                  component="span"
                  className={s.error}
                />
              </div>

              {/* –ó–û–ë–†–ê–ñ–ï–ù–ù–Ø –ü–Ü–î–ì–†–£–ñ–ê–Ñ–ú–û !!! */}
              <div className={s.group}>
                <label className={s.label}>–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è</label>
                <input
                  className={s.input}
                  type="file"
                  name="image"
                  accept="image/*"
                  onChange={(event) =>
                    setFieldValue("image", event.currentTarget.files[0])
                  }
                />
                <ErrorMessage
                  name="image"
                  component="span"
                  className={s.error}
                />
              </div>

              {/* className={s.button} */}
              <button type="submit" disabled={isSubmitting}>
                {isSubmitting ? (
                  <span className={s.loader}>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</span>
                ) : (
                  "–î–æ–¥–∞—Ç–∏"
                )}
              </button>
            </Form>
          );
        }}
      </Formik>
    </div>
  );
};
