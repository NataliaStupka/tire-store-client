// axios.defaults.baseURL = "https://tire-store-server.onrender.com";

import { createAsyncThunk } from "@reduxjs/toolkit";
import axios from "axios";

const BASE_URL =
  import.meta.env.MODE === "development"
    ? "http://localhost:3000" //–±–µ–∫–µ–Ω–¥ –ª–æ–∫–∞–ª—å–Ω–æ
    : "https://tire-store-server.onrender.com"; // –±–µ–∫–µ–Ω–¥ –Ω–∞ Render

//–ø—Ä–∞—Ü—é—î–º–æ —á–µ—Ä–µ–∑ –æ–∫—Ä–µ–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω–∏–π axios (—É–Ω–∏–∫–∞—î–º–æ '–∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É')
export const tireApi = axios.create({
  // baseURL: "https://tire-store-server.onrender.com",
  baseURL: BASE_URL,
  withCredentials: true, // –î–æ–∑–≤–æ–ª—è—î –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ —Ç–∞ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∫—É–∫—ñ, –∑–∞–±–µ–∑–ø–µ—á–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –∫—É–∫—ñ –∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É –Ω–∞ –±–µ–∫–µ–Ω–¥.
});

console.log("üîß üëÄ Environment check:", {
  MODE: import.meta.env.MODE, //"development" –∞–±–æ "production"
  BASE_URL: BASE_URL,
});

//(–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É) –ø—Ä–∏–π–º–∞—î token
//–≤ –º—ñ—Å—Ü—è –¥–µ –ª–æ–≥—ñ–Ω–µ–º–æ—Å—å/—Ä–µ—î—Å—Ç—Ä—É—î–º—Å—è
const setAuthHeader = (token) => {
  if (token) {
    tireApi.defaults.headers.common.Authorization = `Bearer ${token}`;
    console.log("setAuthHeader called with token:", token); // –î–µ—Ç–∞–ª—å–Ω–∏–π –¥–µ–±–∞–≥
  } else {
    console.warn("setAuthHeader called with no token");
  }
};

//–ø—Ä–∏ logout; –æ—á–∏—â–∞—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
const clearAuthHeader = () => {
  tireApi.defaults.headers.common.Authorization = "";
  console.log("clearAuthHeader called");
};

//REGISTER - Create a new user
//credential - –¥–∞–Ω—ñ –≤—Ö–æ–¥—É //name, email, password
export const register = createAsyncThunk(
  "auth/register",
  async (credential, thunkAPI) => {
    try {
      const response = await tireApi.post("/auth/register", credential);

      setAuthHeader(response.data.token); //–∑–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ token
      return response.data; // { user: { name, email, role }, token }
    } catch (err) {
      return thunkAPI.rejectWithValue(err.message);
    }
  }
);

//LOGIN
export const login = createAsyncThunk(
  "auth/login",
  async (credential, thunkAPI) => {
    try {
      const response = await tireApi.post("/auth/login", credential); // //token, user: email. password = response.data
      setAuthHeader(response.data.data.accessToken); //–∑–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ token (–¥–ª—è –≤–∏—Ö–æ–¥—É —ñ —Ç.–¥)
      console.log("Login-operations_response", response.data);

      return response.data; // { user: { name, email, role }, token }
    } catch (err) {
      return thunkAPI.rejectWithValue(err.message);
    }
  }
);

//LOGOUT
export const logout = createAsyncThunk("auth/logout", async (_, thunkAPI) => {
  try {
    const state = thunkAPI.getState();
    const userId = state.auth.user?._id; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π userId –∑–∞–º—ñ—Å—Ç—å sessionId
    await tireApi.post("/auth/logout", { userId });
    clearAuthHeader(); //–æ—á–∏—â–∞—î–º–æ header –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ
  } catch (err) {
    return thunkAPI.rejectWithValue(err.message);
  }

  //   // 2
  //   try {
  //     await tireApi.post("/auth/logout");
  //     clearAuthHeader(); //–æ—á–∏—â–∞—î–º–æ header –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ
  //   } catch (error) {
  //     return thunkAPI.rejectWithValue(error.message);
  //   }
});

//REFRESH
export const refreshUser = createAsyncThunk(
  "auth/refresh",
  async (_, thunkAPI) => {
    //thunkAPI.getState() - –ø–æ–≤–µ—Ä–Ω–µ –≤–µ—Å—å store(auth(isLoggedIn, token), user, ...)
    const savedToken = thunkAPI.getState().auth.token; //–æ—Ç—Ä–∏–º—É—î–º–æ —Ä—è–¥–æ–∫ token
    console.log("Attempting refresh with saved token:", savedToken);

    if (!savedToken) {
      console.warn("‚ö†Ô∏è No token found in store");
      return thunkAPI.rejectWithValue("Token is not exist!");
    }

    try {
      // // –ù–µ —Å—Ç–∞–≤–∏–º–æ —Å—Ç–∞—Ä–∏–π —Ç–æ–∫–µ–Ω —É –∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî –±–µ–∫–µ–Ω–¥ —Å–∞–º –ø—Ä–æ—á–∏—Ç–∞—î refreshToken –∑ cookie
      // setAuthHeader(savedToken); //–º–æ–∂–µ –±—É—Ç–∏ —Å—Ç–∞—Ä–∏–º –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–º.

      const { data } = await tireApi.post(
        "/auth/refresh",
        {},
        {
          withCredentials: true, // –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫—É–∫—ñ
        }
      );

      console.log("‚úÖ Refresh response:", data);
      setAuthHeader(data.data.accessToken); // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —ñ–∑ –Ω–æ–≤–∏–º —Ç–æ–∫–µ–Ω–æ–º (–∑–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–∏–π accessToken —É axios)
      return data.data; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ { accessToken, user }
    } catch (err) {
      console.error("‚ùå Refresh error:", err.response?.data || err.message);
      // return thunkAPI.rejectWithValue(err.message);
      return thunkAPI.rejectWithValue(err.response?.data || err.message);
    }
  }
);

// // === REFRESH === –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
// export const refreshUser = createAsyncThunk(
//   "auth/refresh",
//   async (_, thunkAPI) => {
//     //thunkAPI.getState() - –ø–æ–≤–µ—Ä–Ω–µ –≤–µ—Å—å store(auth(isLoggedIn, token), user, ...)
//     const savedToken = thunkAPI.getState().auth.token; //–æ—Ç—Ä–∏–º—É—î–º–æ —Ä—è–¥–æ–∫ token
//     console.log("Attempting refresh with saved token:", savedToken);
//     if (!savedToken) {
//       return thunkAPI.rejectWithValue("Token is not exist!");
//     }

//     try {
//       setAuthHeader(savedToken); // token
//       const { data } = await tireApi.get("/users/refresh"); //–∑–∞–ø–∏—Ç –∑–∞ —Ç–æ–∫–µ–Ω–æ–º
//       console.log("Refresh response:", data);
//       return data;
//     } catch (error) {
//       return thunkAPI.rejectWithValue(error.message);
//     }
//   }
// );
